/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // PREPARE_GENOME

    withName: 'BWAMEM1_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwa"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "bwa-mem2" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwamem2"
        ]
    }

     withName: STAR_GENOMEGENERATE {
        ext.args   = params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : ''
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'DRAGMAP_HASHTABLE' {
        ext.when         = { !params.bwa && params.step == "mapping" && params.aligner == "dragmap" }
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "dragmap"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict && params.step != "annotate" && params.step != "controlfreec" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dict" },
            pattern: "*dict"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai && params.step != "annotate" }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp && (params.step == "mapping" || params.step == "markduplicates" || params.step == "prepare_recalibration") || params.tools && (params.tools.split(',').contains('controlfreec') || params.tools.split(',').contains('haplotypecaller') || params.tools.split(',').contains('mutect2')) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

        withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels && (params.step == 'mapping' || params.step == "markduplicates" || params.step == 'prepare_recalibration' || (params.tools && params.tools.split(',').contains('haplotypecaller')) ) }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon && params.tools && params.tools.split(',').contains('mutect2') }
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'UNZIP_ALLELES|UNZIP_LOCI|UNZIP_GC|UNZIP_RT'{
        ext.when         = { params.tools && params.tools.split(',').contains('ascat')}
    }

// PREPARE INTERVALS

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX_.*NA' {
        ext.prefix       = {"${meta.id}.vcf"}
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }

// BAM TO FASTQ

    withName: 'COLLATE_FASTQ_MAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.mapped"}
    }

    withName: 'COLLATE_FASTQ_UNMAP'{
        ext.args2        = '-N'
        ext.prefix       = {"${meta.id}.unmapped"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_MAP' {
        ext.args         = '-b -f1 -F12'
        ext.prefix       = {"${meta.id}.map_map"}
    }

    withName: 'SAMTOOLS_VIEW_MAP_UNMAP' {
        ext.args         = '-b -f8 -F260'
        ext.prefix       = {"${meta.id}.map_unmap"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_MAP' {
        ext.args         = '-b -f4 -F264'
        ext.prefix       = {"${meta.id}.unmap_map"}
    }

    withName: 'SAMTOOLS_VIEW_UNMAP_UNMAP' {
        ext.args         = '-b -f12 -F256'
        ext.prefix       = {"${meta.id}.unmap_unmap"}
    }

// TRIMMING

    withName: FASTP {
        ext.args = [ "",
            params.trim_fastq              ?: "--disable_adapter_trimming",
            params.clip_r1 > 0             ? "--trim_front1 ${params.clip_r1}" : "", // Remove bp from the 5' end of read 1.
            params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed.
            params.clip_r2   > 0           ? "--trim_front2 ${params.clip_r2}" : "", //Remove bp from the 5' end of read 2.
            params.three_prime_clip_r2 > 0 ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed.
            params.trim_nextseq            ? "--trim_poly_g" : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails.
            params.split_fastq > 0         ? "--split_by_lines ${params.split_fastq * 4}" : "",

        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/reports/fastp/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json,log}"
            ],
            [
                enabled: params.save_trimmed || params.save_split_fastqs,
                path: { "${params.outdir}/preprocessing/fastp/${meta.sample}/" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz"
            ]
        ]
    }

// UMI Subworkflow

    withName: 'BAM2FASTQ' {
        ext.args         = '-T RX'
        ext.when         = { params.umi_read_structure }
    }

    withName: 'CALLUMICONSENSUS' {
        ext.args         = '-M 1 -S Coordinate'
        ext.prefix       = {"${meta.id}_umi-consensus"}
    }

    if (params.umi_read_structure) {
        withName: "NFCORE_RNADNAVAR:RNADNAVAR:CREATE_UMI_CONSENSUS:MAPPING_UMI:BWAMEM.*_MEM" {
            ext.args         = { "-K 100000000 -p -C -Y -R ${meta.read_group}" }
            ext.args2        = '-bS'
            ext.prefix       = {"${meta.id}.umi_unsorted"}
        }

        withName: ".*DRAGMAP_ALIGN" {
            ext.args2        = '-bS'
            ext.prefix       = {"${meta.id}.umi_unsorted"}
        }
    }

    withName: 'SAMBLASTER' {
        ext.args         = '-M --addMateTags'
        ext.prefix       = {"${meta.id}_unsorted_tagged"}
    }

// MAPPING
    if (params.step == 'mapping') {
        withName: ".*BWAMEM1_MEM" {
            ext.when         = { params.aligner == "bwa-mem" }
        }
        withName: ".*BWAMEM2_MEM" {
            ext.when         = { params.aligner == "bwa-mem2" }
        }

        withName: ".*DRAGMAP_ALIGN" {
            ext.when         = { params.aligner == "dragmap" }
            ext.args         = { "--RGSM ${meta.read_group}" }
        }

        withName: "NFCORE_RNADNAVAR:RNADNAVAR:GATK4_MAPPING:(BWAMEM.*_MEM|DRAGMAP_ALIGN)" {
            // Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
            // However if it's skipped, reads need to be coordinate-sorted
            // Only name sort if Spark for Markduplicates + duplicate marking is not skipped
            ext.args2        = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.split(',').contains('markduplicates'))) ? '-n' : '' }
            ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/" },
                pattern: "*bam",
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.id}/${it}" : null }
            ]
        }

        withName: "NFCORE_RNADNAVAR:RNADNAVAR:GATK4_MAPPING:BWAMEM.*_MEM" {
            // Using -B 3 for tumor samples
            ext.args         = { meta.status == 1 ? "-K 100000000 -Y -B 3 -R ${meta.read_group}" : "-K 100000000 -Y -R ${meta.read_group}" }
        }
    }

    withName: 'MERGE_BAM|INDEX_MERGE_BAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/mapped/${meta.id}/" },
            pattern: "*{bam,bai}"
        ]
    }

// ALIGN_STAR

    withName: STAR_ALIGN {
        ext.args   = [
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : '',
            params.star_twopass ? '--twopassMode Basic' : '',
            params.star_max_memory_bamsort > 0 ? "--limitBAMsortRAM ${params.star_max_memory_bamsort}" : "",
            params.star_bins_bamsort > 0 ? "--outBAMsortingBinsN ${params.star_bins_bamsort}" : "",
            params.star_max_collapsed_junc > 0 ? "--limitOutSJcollapsed ${params.star_max_collapsed_junc}" : ""
        ].join(' ').trim()
        ext.args2   = { "--outSAMattrRGline ${meta.read_group}" }
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "" }
        publishDir = [
            [
                path: { "${params.outdir}/reports/stats/${meta.id}/STAR_log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: false
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

// POST ALIGNMENT AND PREPROCESSING BAM
    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned') : "${meta.id}.aligned" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned') : "${meta.id}.aligned" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

// MARKDUPLICATES

    withName: 'SAMTOOLS_CRAMTOBAM.*'{
        ext.args         = "-b"
    }


    withName: 'SAMTOOLS_STATS_CRAM'{
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted.cram" : "${meta.id}.md.cram" }
    }

    withName: 'SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step Markduplicates either run through MD or Convert -> then saved as md.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as md.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as md.cram
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${meta.id}.sorted" : "${meta.id}.md" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) ? "${params.outdir}/preprocessing/mapped/${meta.id}/" : "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: '.*:BAM_TO_CRAM_SNCR:SAMTOOLS_BAMTOCRAM.*' {
        // BAM provided for step splitncigar either run through MD or Convert -> then saved as sncr.cram
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as sncr.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as sncr.cram
        ext.args         = "-C"
        ext.prefix       = { (params.skip_tools && params.skip_tools.split(',').contains('splitncigar')) ? "${meta.id}.sorted" : "${meta.id}.sncr" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { (params.skip_tools && params.skip_tools.split(',').contains('splitncigar')) ? "${params.outdir}/preprocessing/mapped/${meta.id}/" : "${params.outdir}/preprocessing/splitncigar/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        ext.prefix       = { "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/markduplicates/${meta.id}" },
            pattern: "*metrics"
        ]
    }

    withName: GATK4_BEDTOINTERVALLIST {
        publishDir  = [ enabled: false ]
    }

    withName: GATK4_INTERVALLISTTOOLS {
        ext.args   = [
            '--SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW',
            '--UNIQUE true',
            '--SORT true',
            params.gatk_interval_scatter_count ? "--SCATTER_COUNT $params.gatk_interval_scatter_count" : ''
        ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    withName: '.*:SPLITNCIGAR:GATK4_SPLITNCIGARREADS' {
        ext.args    =  ['-rf ReassignOneMappingQuality',
                        '-RMQF 255 ',
                        '-RMQT 60',
                        '-U ALLOW_N_CIGAR_READS'].join(' ').trim()
    }

    withName: '.*:SPLITNCIGAR:SAMTOOLS_INDEX' {
        ext.args    =  params.bam_csi_index ? '-c' : ''
    }

    withName: '.*:SPLITNCIGAR:.*' {
        publishDir  = [ enabled: false ]
    }


    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix       = { "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) }
        publishDir       = [
            [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
                pattern: "*{bam,bai}"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/" },
                pattern: "*metrics",
                saveAs: { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) ? "markduplicates/${meta.id}/${it}" : null}
            ]
        ]
    }

    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.prefix       = { "${meta.id}.md.cram" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

    if (params.use_gatk_spark && params.use_gatk_spark.split(',').contains('markduplicates')) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:MARKDUPLICATES_SPARK:SAMTOOLS_CRAMTOBAM'{
            ext.prefix       = { "${meta.id}.md" }
            ext.when         = { params.save_output_as_bam}
            publishDir       = [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/markduplicates/${meta.id}/" },
                pattern: "*{md.bam,md.bam.bai}"
            ]
        }
    }

    // PREPARE_RECALIBRATION
    withName: 'BASERECALIBRATOR|BASERECALIBRATOR_SPARK' {
        ext.args         = { meta.status == 2 ? "--lenient" : "" }
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*table",
            saveAs: { meta.num_intervals > 1 ? null : "recal_table/${meta.id}/${it}" }
        ]
    }

    withName: 'GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}
        ext.when         = { meta.num_intervals > 1 }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recal_table/${meta.id}/" },
            pattern: "*table",
        ]
    }

// RECALIBRATE

    withName: 'APPLYBQSR|APPLYBQSR_SPARK' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/" },
            pattern: "*cram",
            saveAs: { meta.num_intervals > 1 ? null : "recalibrated/${meta.id}/${it}" }
        ]
    }


    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:MERGE_CRAM' {
            ext.prefix       = { "${meta.id}.recal" }
            ext.when         = { meta.num_intervals > 1 }
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
                pattern: "*cram"
            ]
        }

        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:(RECALIBRATE|RECALIBRATE_SPARK):MERGE_INDEX_CRAM:INDEX_CRAM' {
            publishDir       = [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
                pattern: "*{recal.cram,recal.cram.crai}"
            ]
        }
    }

    withName: 'SAMTOOLS_CRAMTOBAM_RECAL'{
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { params.save_output_as_bam}
        publishDir       = [
            enabled: params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
            pattern: "*{recal.bam,recal.bam.bai}"
        ]
    }

    withName: 'SAMTOOLS_BAMTOCRAM_VARIANTCALLING' {
        ext.prefix       = { "${meta.id}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/preprocessing/recalibrated/${meta.id}/" },
            pattern: "*{cram,crai}"
        ]
    }

// QC

    withName: 'FASTQC' {
        errorStrategy    = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    if (params.step == 'mapping' || params.step == 'markduplicates') {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:CRAM_QC:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.cram" }
        }
    }

    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = { !params.wes ? "-n --fast-mode --by 500" : ""}
        ext.prefix       = { params.skip_tools && params.skip_tools.split(',').contains('markduplicates') ? "${meta.id}.sorted" : "${meta.id}.md" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/mosdepth/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    if ((params.step == 'mapping' || params.step == 'markduplicates'|| params.step == 'prepare_recalibration'|| params.step == 'recalibrate') && (!(params.skip_tools && params.skip_tools.split(',').contains('baserecalibrator')))) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:CRAM_QC:MOSDEPTH' {
            ext.prefix       = { "${meta.id}.recal" }
        }

        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_PREPROCESSING:CRAM_QC:SAMTOOLS_STATS' {
            ext.prefix       = { "${meta.id}.recal.cram" }
            ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/samtools/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // STRELKA
    withName: 'MERGE_STRELKA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/strelka/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_STRELKA' {
        ext.prefix       = {"${meta.id}.strelka.variants"}
    }
    withName: 'MERGE_STRELKA_GENOME' {
        ext.prefix       = {"${meta.id}.strelka.genome"}
    }
    withName: 'STRELKA_.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.strelka" : "${meta.id}.strelka.${target_bed.simpleName}" }
        ext.args         = {params.wes ? "--exome" : "" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "strelka/${meta.id}/${it}" }
        ]
    }
    withName: 'MERGE_STRELKA_INDELS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_indels"}
    }
    withName: 'MERGE_STRELKA_SNVS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_snvs"}
    }


        // FREEBAYES
    withName: 'MERGE_FREEBAYES' {
        ext.prefix       = { "${meta.id}.freebayes" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FREEBAYES' {
        //To make sure no naming conflicts ensure with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}" : "${meta.id}.${target_bed.simpleName}" }
        ext.args         = '--min-alternate-fraction 0.1 --min-mapping-quality 1'
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
        publishDir       = [enabled: false]
    }

    withName: 'VCFFILTER' {
        //To make sure no naming conflicts ensure with module BCFTOOLS_SORT & the naming being correct in the output folder
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}.filtered" }
        ext.args         = '-f "QUAL > 1 & QUAL / AO > 10 & SAF > 0 & SAR > 0 & RPR > 1 & RPL > 1" -t PASS -F FAIL'
        ext.when         = { params.tools && params.tools.split(',').contains('freebayes') }
        publishDir       = [enabled: false]
    }


    withName: 'BCFTOOLS_SORT' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.freebayes" : "${vcf.minus("vcf")}.sort" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*vcf.gz",
            saveAs: { meta.num_intervals > 1 ? null : "freebayes/${meta.id}/${it}" }
        ]
    }

        withName : 'TABIX_VC_FREEBAYES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/freebayes/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //MANTA
    withName: 'MERGE_MANTA.*' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/manta/${meta.id}/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'MERGE_MANTA_DIPLOID' {
        ext.prefix       = {"${meta.id}.manta.diploid_sv"}
    }
    withName: 'MERGE_MANTA_SMALL_INDELS' {
        ext.prefix       = {"${meta.id}.manta.candidate_small_indels"}
    }
    withName: 'MERGE_MANTA_SV' {
        ext.prefix       = {"${meta.id}.manta.candidate_sv"}
    }
    withName: 'MANTA.*' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.manta" : "${meta.id}.manta.${target_bed.simpleName}" }
        ext.args         = { params.wes ? "--exome" : "" }
        ext.when         = { params.tools && params.tools.split(',').contains('manta') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{diploid_sv,tumor_sv,somatic_sv}.{vcf.gz,vcf.gz.tbi}",
            saveAs: { meta.num_intervals > 1 ? null : "manta/${meta.id}/${it}" }
        ]
    }
    withName: 'MERGE_MANTA_TUMOR' {
        ext.prefix       = {"${meta.id}.manta.tumor_sv"}
    }
    withName: 'MERGE_MANTA_SOMATIC' {
        ext.prefix       = {"${meta.id}.manta.somatic_sv"}
    }

    //STRELKA
    withName: 'MERGE_STRELKA_INDELS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_indels"}
    }
    withName: 'MERGE_STRELKA_SNVS' {
        ext.prefix       = {"${meta.id}.strelka.somatic_snvs"}
    }

    //FREEBAYES
    if (params.tools && params.tools.split(',').contains('freebayes')) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING:RUN_FREEBAYES_SOMATIC:FREEBAYES' {
            ext.args       = "--pooled-continuous \
                            --pooled-discrete \
                            --genotype-qualities \
                            --report-genotype-likelihood-max \
                            --allele-balance-priors-off \
                            --min-alternate-fraction 0.03 \
                            --min-repeat-entropy 1 \
                            --min-alternate-count 2 "
        }
    }

    //MUTECT2
    if (params.tools && params.tools.split(',').contains('mutect2')) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2' {
            ext.args         = { params.ignore_soft_clipped_bases ?
                                "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id} -genotype-pon-sites --alleles meta.alleles" :
                                "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.patient}_${meta.normal_id} -genotype-pon-sites --alleles meta.alleles" }
        }
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:CALCULATECONTAMINATION' {
        ext.prefix       = { "${meta.id}.mutect2" }
        ext.args         = { "-tumor-segmentation ${meta.id}.mutect2.segmentation.table" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.id}/${filename}" }
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:CALCULATECONTAMINATION' {
            ext.prefix       = { "${meta.id}.forced" }
            ext.args         = { "-tumor-segmentation ${meta.id}.forced.segmentation.table" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : "consensus/${meta.id}/${filename}" }
            ]
        }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGE_MUTECT2.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGE_MUTECT2.*' {
            ext.prefix       = { "${meta.id}.forced" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/consensus/${meta.id}" },
                pattern: "*{vcf.gz,vcf.gz.tbi}"
            ]
        }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:FILTERMUTECTCALLS.*'{
        ext.prefix       = {"${meta.id}.mutect2.filtered"}
        ext.args         = { meta.status >= 2 ? '--max-events-in-region 5': ''}
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "mutect2/${meta.id}/${filename}" }
        ]
    }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:FILTERMUTECTCALLS'{
        ext.prefix       = {"${meta.id}.mutect2_consensus.filtered"}
        ext.args         = { meta.status >= 2 ? '--max-events-in-region 5': ''}

        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "consensus/${meta.id}/${filename}" }
        ]
    }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GATHERPILEUPSUMMARIES_.*' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.tumor_id}_vs_${meta.normal_id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GATHERPILEUPSUMMARIES_.*' {
        ext.prefix       = { "${meta.id}.forced" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/consensus/${meta.tumor_id}_vs_${meta.normal_id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GETPILEUPSUMMARIES_.*' {
        ext.prefix        = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        publishDir        = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*.table",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.tumor_id}_vs_${meta.normal_id}/${it}" }
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:GETPILEUPSUMMARIES_.*' {
            ext.prefix        = { meta.num_intervals <= 1 ? "${meta.id}.forced" : "${meta.id}.forced.${intervals.simpleName}" }
            publishDir        = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*.table",
                saveAs: { meta.num_intervals > 1 ? null : "consensus/${meta.tumor_id}_vs_${meta.normal_id}/${it}" }
            ]
        }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:LEARNREADORIENTATIONMODEL'{
        ext.prefix       = { "${meta.id}.mutect2.artifactprior" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:LEARNREADORIENTATIONMODEL'{
        ext.prefix       = { "${meta.id}.forced.artifactprior" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/consensus/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGEMUTECTSTATS' {
        ext.prefix       = { "${meta.id}.mutect2" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/mutect2/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MERGEMUTECTSTATS' {
            ext.prefix       = { "${meta.id}.forced" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/consensus/${meta.id}/" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:PAIR_VARIANT_CALLING_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2'{
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.mutect2" : "${meta.id}.mutect2.${intervals.simpleName}" }
        ext.when         = { params.tools && params.tools.split(',').contains('mutect2') }
        ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" : "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/" },
            pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
            saveAs: { meta.num_intervals > 1 ? null : "mutect2/${meta.id}/${it}" }
        ]
    }
    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*NA:GATK_TUMOR_NORMAL_SOMATIC_VARIANT_CALLING:MUTECT2'{
            ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.forced" : "${meta.id}.forced.${intervals.simpleName}" }
            ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" : "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
                saveAs: { meta.num_intervals > 1 ? null : "consensus/${meta.id}/${it}" }
            ]
        }

    // VCF QC
    withName: 'BCFTOOLS_STATS'{
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('bcftools')) }
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*'{
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('vcftools')) }
        ext.prefix       = { "${variant_file.baseName.minus(".vcf")}" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_TSTV_COUNT'{
        ext.args         = "--TsTv-by-count"
    }

    withName: 'VCFTOOLS_TSTV_QUAL'{
        ext.args         = "--TsTv-by-qual"
    }

    withName: 'VCFTOOLS_SUMMARY'{
        ext.args         = "--FILTER-summary"
    }

    // VT
    // TODO: Are stats going to the report dir?
    withName: 'VT_DECOMPOSE'{
        ext.args         = ""
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}.dec" }
        publishDir       = [
            [mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vt/${meta.variantcaller}/${meta.id}/" },
            pattern: '*.stats'],
            [mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.variantcaller}/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            enabled: true]
                            ]
    }

    withName: 'VT_NORMALIZE'{
        ext.prefix       = { "${vcf.baseName.minus(".dec.vcf")}.norm" }
        publishDir       = [
            [mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vt/${meta.variantcaller}/${meta.id}/" },
            pattern: '*.stats'],
            [mode: params.publish_dir_mode,
            path: { "${params.outdir}/variant_calling/${meta.variantcaller}/${meta.id}/" },
            pattern: "*{vcf.gz,vcf.gz.tbi}",
            enabled: true]
                        ]
    }

    withName: 'NFCORE_RNADNAVAR:RNADNAVAR:GATK_FORCE_CALLS_.*:MUTECT2' {
         ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.forced" : "${meta.id}.forced.${intervals.simpleName}" }
            ext.args         = { params.ignore_soft_clipped_bases ? "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" : "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz -genotype-pon-sites" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/" },
                pattern: "*{vcf.gz,vcf.gz.tbi,stats}",
                saveAs: { meta.num_intervals > 1 ? null : "consensus/${meta.id}/${it}" }
            ]
        ext.args         = { params.ignore_soft_clipped_bases ?
                            "--dont-use-soft-clipped-bases true --f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.normal_id} -genotype-pon-sites --genotype-filtered-alleles --alleles ${meta.alleles}" :
                            "--f1r2-tar-gz ${task.ext.prefix}.f1r2.tar.gz --normal-sample ${meta.normal_id} -genotype-pon-sites --genotype-filtered-alleles --alleles ${meta.alleles}" }
        }

    
    withName: 'ENSEMBLVEP' {
        ext.args          = { [
            '--no_progress --shift_hgvs 1 --check_existing --total_length --allele_number --no_escape --xref_refseq --failed 1 --flag_pick_allele --pick_order canonical,tsl,biotype,rank,ccds,length --format vcf --force_overwrite',
            (params.vep_dbnsfp && params.dbnsfp && !params.dbnsfp_consequence)    ? "--plugin dbNSFP,${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"                                              : '',
            (params.vep_dbnsfp && params.dbnsfp && params.dbnsfp_consequence)     ? "--plugin dbNSFP,'consequence=${params.dbnsfp_consequence}',${params.dbnsfp.split("/")[-1]},${params.dbnsfp_fields}"   : '',
            (params.vep_loftee)                                                   ? "--plugin LoF,loftee_path:/opt/conda/envs/nf-core-vep-${params.vep_version}/share/ensembl-vep-${params.vep_version}-0" : '',
            (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split("/")[-1]},indel=${params.spliceai_indel.split("/")[-1]}"            : '',
            (params.vep_spliceregion)                                             ? '--plugin SpliceRegion'                                                                                                : '',
            (params.vep_out_format)                                               ? "--${params.vep_out_format}"                                                                                           : '--vcf'
        ].join(' ').trim() }
        // If just VEP: <vcf prefix>_VEP.ann.vcf
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP" }
        if (params.vep_cache) {
            container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
            }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/EnsemblVEP/${meta.variantcaller}/${meta.id}/" },
                pattern: "*html"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.variantcaller}/${meta.id}/" },
                pattern: "*{json,tab}"
            ]
        ]
    }

    withName: "VCF2MAF" {
            // If merge: Output file will have format *_snpEff_VEP.ann.vcf, *_snpEff_VEP.ann.json or *_snpEff_VEP.ann.tab
            ext.prefix     = { "${vcf.baseName.minus(".ann.vcf")}" }
            ext.args       = { "--ncbi-build ${params.vep_genome}" }
        }
    withName: "DNA_FILTERING" {
                ext.prefix = { "${maf.baseName.minus(".maf")}_filtered"}
                ext.args   = { params.whitelist? "--whitelist ${params.whitelist}": "" }
            }

    // SNPEFF THEN VEP
    if (params.tools && params.tools.split(',').contains('merge')) {
        withName: ".*:ANNOTATION_MERGE:ENSEMBLVEP" {
            // If merge: Output file will have format *_snpEff_VEP.ann.vcf, *_snpEff_VEP.ann.json or *_snpEff_VEP.ann.tab
            ext.prefix       = { "${vcf.baseName.minus(".ann.vcf")}_VEP" }
        }
    }

    // ALL ANNOTATION TOOLS
    if (params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('vep') || params.tools.split(',').contains('merge'))) {
        withName: "NFCORE_RNADNAVAR:RNADNAVAR:ANNOTATE:.*:TABIX_BGZIPTABIX" {
            ext.prefix       = { input.baseName }
            publishDir       = [
                    mode: params.publish_dir_mode,
                    path: { "${params.outdir}/annotation/${meta.variantcaller}/${meta.id}/" },
                    pattern: "*{gz,gz.tbi}"
            ]
        }
    }

    if (params.tools && (params.tools.split(',').contains('snpeff') || params.tools.split(',').contains('merge'))) {
        withName: 'NFCORE_RNADNAVAR:RNADNAVAR:ANNOTATE:ANNOTATION_SNPEFF:TABIX_BGZIPTABIX' {
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.variantcaller}/${meta.id}/" },
                pattern: "*{gz,gz.tbi}",
                saveAs: { params.tools.split(',').contains('snpeff') ? it : null }
            ]
        }
    }
    
    // MULTIQC

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/reports"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: !params.skip_multiqc
        ]
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }






}
